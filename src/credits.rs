// This file is generated by rust-protobuf 2.1.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct AddCreditsCommand {
    // message fields
    pub account: i64,
    pub amount: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AddCreditsCommand {
    pub fn new() -> AddCreditsCommand {
        ::std::default::Default::default()
    }

    // int64 account = 1;

    pub fn clear_account(&mut self) {
        self.account = 0;
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: i64) {
        self.account = v;
    }

    pub fn get_account(&self) -> i64 {
        self.account
    }

    // int64 amount = 2;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> i64 {
        self.amount
    }
}

impl ::protobuf::Message for AddCreditsCommand {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.account = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.account != 0 {
            my_size += ::protobuf::rt::value_size(1, self.account, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.account != 0 {
            os.write_int64(1, self.account)?;
        }
        if self.amount != 0 {
            os.write_int64(2, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddCreditsCommand {
        AddCreditsCommand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "account",
                    |m: &AddCreditsCommand| { &m.account },
                    |m: &mut AddCreditsCommand| { &mut m.account },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "amount",
                    |m: &AddCreditsCommand| { &m.amount },
                    |m: &mut AddCreditsCommand| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddCreditsCommand>(
                    "AddCreditsCommand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddCreditsCommand {
        static mut instance: ::protobuf::lazy::Lazy<AddCreditsCommand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddCreditsCommand,
        };
        unsafe {
            instance.get(AddCreditsCommand::new)
        }
    }
}

impl ::protobuf::Clear for AddCreditsCommand {
    fn clear(&mut self) {
        self.clear_account();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddCreditsCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddCreditsCommand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddCreditsResponse {
    // message fields
    pub new_amount: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AddCreditsResponse {
    pub fn new() -> AddCreditsResponse {
        ::std::default::Default::default()
    }

    // int64 new_amount = 1;

    pub fn clear_new_amount(&mut self) {
        self.new_amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_amount(&mut self, v: i64) {
        self.new_amount = v;
    }

    pub fn get_new_amount(&self) -> i64 {
        self.new_amount
    }
}

impl ::protobuf::Message for AddCreditsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.new_amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.new_amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.new_amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.new_amount != 0 {
            os.write_int64(1, self.new_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddCreditsResponse {
        AddCreditsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "new_amount",
                    |m: &AddCreditsResponse| { &m.new_amount },
                    |m: &mut AddCreditsResponse| { &mut m.new_amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddCreditsResponse>(
                    "AddCreditsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddCreditsResponse {
        static mut instance: ::protobuf::lazy::Lazy<AddCreditsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddCreditsResponse,
        };
        unsafe {
            instance.get(AddCreditsResponse::new)
        }
    }
}

impl ::protobuf::Clear for AddCreditsResponse {
    fn clear(&mut self) {
        self.clear_new_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddCreditsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddCreditsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountStatusRequest {
    // message fields
    pub account: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountStatusRequest {
    pub fn new() -> AccountStatusRequest {
        ::std::default::Default::default()
    }

    // int64 account = 1;

    pub fn clear_account(&mut self) {
        self.account = 0;
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: i64) {
        self.account = v;
    }

    pub fn get_account(&self) -> i64 {
        self.account
    }
}

impl ::protobuf::Message for AccountStatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.account = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.account != 0 {
            my_size += ::protobuf::rt::value_size(1, self.account, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.account != 0 {
            os.write_int64(1, self.account)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountStatusRequest {
        AccountStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "account",
                    |m: &AccountStatusRequest| { &m.account },
                    |m: &mut AccountStatusRequest| { &mut m.account },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountStatusRequest>(
                    "AccountStatusRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountStatusRequest {
        static mut instance: ::protobuf::lazy::Lazy<AccountStatusRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountStatusRequest,
        };
        unsafe {
            instance.get(AccountStatusRequest::new)
        }
    }
}

impl ::protobuf::Clear for AccountStatusRequest {
    fn clear(&mut self) {
        self.clear_account();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountStatus {
    // message fields
    pub amount: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountStatus {
    pub fn new() -> AccountStatus {
        ::std::default::Default::default()
    }

    // int64 amount = 1;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> i64 {
        self.amount
    }
}

impl ::protobuf::Message for AccountStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0 {
            os.write_int64(1, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountStatus {
        AccountStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "amount",
                    |m: &AccountStatus| { &m.amount },
                    |m: &mut AccountStatus| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountStatus>(
                    "AccountStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountStatus {
        static mut instance: ::protobuf::lazy::Lazy<AccountStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountStatus,
        };
        unsafe {
            instance.get(AccountStatus::new)
        }
    }
}

impl ::protobuf::Clear for AccountStatus {
    fn clear(&mut self) {
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcredits.proto\"E\n\x11AddCreditsCommand\x12\x18\n\x07account\x18\x01\
    \x20\x01(\x03R\x07account\x12\x16\n\x06amount\x18\x02\x20\x01(\x03R\x06a\
    mount\"3\n\x12AddCreditsResponse\x12\x1d\n\nnew_amount\x18\x01\x20\x01(\
    \x03R\tnewAmount\"0\n\x14AccountStatusRequest\x12\x18\n\x07account\x18\
    \x01\x20\x01(\x03R\x07account\"'\n\rAccountStatus\x12\x16\n\x06amount\
    \x18\x01\x20\x01(\x03R\x06amount2\x7f\n\x07Credits\x12;\n\x10GetAccountS\
    tatus\x12\x15.AccountStatusRequest\x1a\x0e.AccountStatus\"\0\x127\n\nAdd\
    Credits\x12\x12.AddCreditsCommand\x1a\x13.AddCreditsResponse\"\0J\xd6\
    \x04\n\x06\x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\
    \x06\0\x12\x04\x02\0\x05\x01\n\n\n\x03\x06\0\x01\x12\x03\x02\x08\x0f\n\
    \x0b\n\x04\x06\0\x02\0\x12\x03\x03\x04I\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\x03\x08\x18\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x03\x19-\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\x038E\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x04\
    \x04E\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x04\x08\x12\n\x0c\n\x05\x06\
    \0\x02\x01\x02\x12\x03\x04\x13$\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \x04/A\n\n\n\x02\x04\0\x12\x04\x07\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x07\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x04\x16\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x08\x04\x07\x1b\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x08\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\n\x11\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x08\x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x04\
    \x15\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\t\x04\x08\x16\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\t\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\n\
    \x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x13\x14\n\n\n\x02\x04\x01\
    \x12\x04\x0c\0\x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x1a\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\r\x04\x19\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\
    \r\x04\x0c\x1c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x04\t\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\r\n\x14\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \r\x17\x18\n\n\n\x02\x04\x02\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x10\x08\x1c\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x04\x16\n\r\n\
    \x05\x04\x02\x02\0\x04\x12\x04\x11\x04\x10\x1e\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x11\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x11\n\x11\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x11\x14\x15\n\n\n\x02\x04\x03\x12\
    \x04\x14\0\x16\x01\n\n\n\x03\x04\x03\x01\x12\x03\x14\x08\x15\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03\x15\x04\x15\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\
    \x15\x04\x14\x17\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x15\x04\t\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03\x15\n\x10\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03\x15\x13\x14b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
